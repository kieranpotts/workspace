{

  "folders": [
    {
      "name": "__TODO__ ⛔",
      "path": "../../__TODO__"
    },
    {
      "name": "actions",
      "path": "../../actions"
    },
    {
      "name": "avatar",
      "path": "../../avatar"
    },
    {
      "name": "blog",
      "path": "../../blog"
    },
    {
      "name": "bootstrap",
      "path": "../../bootstrap"
    },
    {
      "name": "cheats",
      "path": "../../cheats"
    },
    {
      "name": "cover-letter ⛔",
      "path": "../../cover-letter"
    },
    {
      "name": "designs",
      "path": "../../designs"
    },
    {
      "name": "devboxes 🔒",
      "path": "../../devboxes"
    },
    {
      "name": "devtools",
      "path": "../../devtools"
    },
    {
      "name": "dictionary",
      "path": "../../dictionary"
    },
    {
      "name": "dotfiles",
      "path": "../../dotfiles"
    },
    {
      "name": "eslint-config 🔒",
      "path": "../../eslint-config"
    },
    {
      "name": "garden",
      "path": "../../garden"
    },
    {
      "name": "gitex",
      "path": "../../gitex"
    },
    {
      "name": "interviews ⛔",
      "path": "../../interviews"
    },
    {
      "name": "json-schema",
      "path": "../../json-schema"
    },
    {
      "name": "kieranpotts",
      "path": "../../kieranpotts"
    },
    {
      "name": "makebook 🔒",
      "path": "../../makebook"
    },
    {
      "name": "ocean",
      "path": "../../ocean"
    },
    {
      "name": "playbook",
      "path": "../../playbook"
    },
    {
      "name": "prototypes 🔒",
      "path": "../../prototypes"
    },
    {
      "name": "résumé",
      "path": "../../resume"
    },
    {
      "name": "rfcs 🔒",
      "path": "../../rfcs"
    },
    {
      "name": "sh 🔒",
      "path": "../../sh"
    },
    {
      "name": "standards",
      "path": "../../standards"
    },
    {
      "name": "srcflow",
      "path": "../../srcflow"
    },
    {
      "name": "template",
      "path": "../../template"
    },
    {
      "name": "website",
      "path": "../../website"
    },
    {
      "name": "workspace",
      "path": "../../workspace"
    }
  ],

  "extensions": {

    "recommendations": [

      /*
      The following are general-purpose extensions for VS Code, which will be
      useful in the context of most software projects. The extend VS Code's
      own functionality, rather than providing capabilities for particular
      languages, tools, or runtime environments.

      Language servers and tool-specific extensions, such as the official Python
      extension and wrappers for JavaScript tools such as ESLint, SHOULD be
      added to each repository's `.vscode/extensions.js` file, as required for
      each project.

      To install the extensions, open this repository in its own workspace, then
      go to the Recommended section of the Extensions panel.

      Some extensions will need to be enabled in WSL, too.

      See also:
      https://code.visualstudio.com/docs/editor/extension-marketplace#_workspace-recommended-extensions
      */

      /* Code Spell Checker — Spelling checker for all source code. */
      "streetsidesoftware.code-spell-checker",

      /* Draw.io Integration — Edit images with draw.io directly inside VS Code. */
      "hediet.vscode-drawio",

      /* Fold Plus — Additional code folding commands. */
      "dakara.dakara-foldplus",

      /* Git History — Adds a `git log` panel to VS Code. */
      "guodongsun.vscode-git-cruise",

      /* GitHub Copilot — Intelligent code suggestions. */
      "github.copilot",

      /* GitHub Copilot Chat */
      "github.copilot-chat",

      /* GitHub Theme — GitHub-style theme for VS Code. */
      "GitHub.github-vscode-theme",

      /* IntelliCode — AI-assisted development. */
      "visualstudioexptteam.vscodeintellicode",

      /* Intellicode API Usage Examples — See code examples for hundreds-of-thousands of APIs. */
      "visualstudioexptteam.intellicode-api-usage-examples",

      /* Remote - SSH — Connect to a remote machine using SSH. */
      "ms-vscode-remote.remote-ssh",

      /* Remote - SSH — Editing Configuration Files — Edit SSH configuration files. */
      "ms-vscode-remote.remote-ssh-edit",

      /* Remote Repositories — Remotely browse and edit Git repositories. */
      "ms-vscode.remote-repositories",

      /* Render Line Endings — Displays line ending symbols and other white space characters. */
      "medo64.render-crlf",

      /* Restore Editors — Quickly save and restore groups of editors (ie. editor tabs). */
      "amodio.restore-editors",

      /* The Ocean — My own VS Code theme. */
      "kieranpotts.ocean-vscode-theme",

      /* Todo Tree — Browse TODO, FIXME and other comments. */
      "gruntfuggly.todo-tree",

      /* UMLet — Generate diagrams with UMLet. To use, simply create a new text file with the `.uxf` extension. */
      "theumletteam.umlet",

      /* VS Code Speech — Speech recognition. */
      "ms-vscode.vscode-speech",

      /* vscode-pdf — Render PDF documents in VS Code. */
      "tomoki1207.pdf",

      /* WSL — Open folders and workspaces from WSL. */
      "ms-vscode-remote.remote-wsl",

    ]
  },

  "settings": {

    /* Remove archived repositories from VS Code's built-in Git GUI – can't push
    to these anyway. This setting requires use of absolute paths. */
    "git.ignoredRepositories": [
      "/home/kieran/dev/personal/devboxes",
      "/home/kieran/dev/personal/eslint-config",
      "/home/kieran/dev/personal/makebook",
      "/home/kieran/dev/personal/prototypes",
      "/home/kieran/dev/personal/rfcs",
      "/home/kieran/dev/personal/sh",
    ],

    /* Disable the feature to automatically save and restore open editors when
    switching between source control branches. Having this turned on is a bit
    annoying when working with multiple repos in a workspace. */
    "scm.workingSets.enabled": false,

    /*
    IMPORTANT!
    The following settings SHOULD be replicated in `./.vscode/settings.json`
    in each repository, as appropriate, to ensure the settings are applied when
    individual repositories are opened in their own workspaces.
    */

    /* Vertical guidelines for line wrapping. */
    "editor.rulers": [
      80,
      100,
      120,
    ],

    /* By default, wrap long lines at the viewport or 120 characters, whichever is narrowest. */
    "editor.wordWrap": "bounded",
    "editor.wordWrapColumn": 120,

    /* Show control and empty space characters. */
    "editor.renderControlCharacters": true,
    "editor.renderWhitespace": "all",

    /* Enforce 2 spaces for indentation by default. */
    "editor.detectIndentation": false,
    "editor.insertSpaces": true,
    "editor.tabSize": 2,

    /* Disable auto-formatting by default. */
    "editor.formatOnPaste": false,
    "editor.formatOnSave": false,
    "editor.formatOnType": false,

    /* Disable auto-fixes by default. */
    "editor.codeActionsOnSave": {
      "source.fixAll": "never"
    },

    /* Language-specific overrides. */
    "[asciidoc]": {
      "editor.rulers": [100],
      "editor.wordWrap": "bounded",
      "editor.wordWrapColumn": 100,
    },
    "[markdown]": {
      "editor.rulers": [100],
      "editor.wordWrap": "bounded",
      "editor.wordWrapColumn": 100,
    },
    "[terraform]": {
      /* Enable autoformatting of Terraform files. */
      "editor.defaultFormatter": "hashicorp.terraform",
      "editor.formatOnPaste": true,
      "editor.formatOnSave": true,
      "editor.formatOnType": true,
    },

    /* Preference for quotes in JS/TS code. */
    "javascript.preferences.quoteStyle": "single",
    "typescript.preferences.quoteStyle": "single",

    /* Disable auto-formatting and validation for JavaScript/TypeScript. These
    settings MUST be applied at the workspace level. */
    "javascript.format.enable": false,
    "javascript.validate.enable": false,
    "js/ts.implicitProjectConfig.checkJs": false,

    /* Always prompt before committing to a protected branch. */
    "git.branchProtectionPrompt": "alwaysPrompt",
    "git.branchProtection": [
      // "stable",
      // "release/*",
    ],

    /*
    EXTENSION SETTINGS
    The following settings are applicable for the extensions listed in
    the `extensions.recommendations` section above.
    */

    /*
    Code Spell Checker extension.
    https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker
    */

    /* Spell check language. For consistency with our technical documentation,
    we write in American English. */
    "cSpell.language": "en-US",

    /* File paths to not spell check. */
    "cSpell.ignorePaths": [
      ".git",
      ".vscode",
      "*.log"
    ],

    /* Disable spelling errors on compound words like 'errormessage' and
    'builddir'. This setting makes the cSpell spell check unreliable and so
    we must delimit words in code, eg 'errorMessage` or `build_dir`. */
    "cSpell.allowCompoundWords": false,

    /* Custom dictionary. The dictionary file will be automatically created,
    if it does not already exists, in the user's home directory on the
    filesystem of the workspace. If VS Code is running in Windows but the
    open workspace is in WSL, the dictionary will be installed in the guest
    OS, WSL. But if the open workspace is on the host OS filesystem, the
    dictionary will be installed in the user's home directory on Windows.
    To keep the two synchronized, this repository should be cloned in both
    Windows and WSL, and in both the ~/.cspell/dictionary.txt location
    symlinked back to the `./var/dictionary.txt` file in this repository. */
    "cSpell.customDictionaries": {
      "personalDictionary": {
        "name": "Personal Dictionary (en-US)",
        "path": "${workspaceFolder:dictionary}/src/en-US.txt",
        "scope": "workspace",
        "addWords": true
      }
    },

    /* Spellings to always ignore. These are not real words, but are names or
    identifiers of some kind: people's names, domain names, URL slugs, etc. */
    "cSpell.ignoreWords": [
      "kieran",
      "kieranpotts",
      "potts"
    ],

    /* Spellings always considered incorrect. This is useful for common spelling
    errors. For example, "hte" should be "the". */
    "cSpell.flagWords": [
      "backend", // back-end
      "frontend", // front-end"
      "homepage", // home page
      "hte", // the
      "backend", // back-end
      "frontend", // front-end"
      "homepage", // home page
      "hte", // the
      "life cycle", // lifecycle
      "mockup", // mock-up
      "mockups", // mock-ups
      "vscode", // vs code
      "web app", // webapp
      "web apps", // webapps
      "web page", // webpage
      "web pages", // webpages
      "web site", // website
      "web sites", // websites
      "mockup", // mock-up
      "mockups", // mock-ups
      "vscode", // vs code
      "web app", // webapp
      "web apps", // webapps
      "web page", // webpage
      "web pages", // webpages
      "web site", // website
      "web sites" // websites
    ],

    /*
    GitHub Copilot extension.
    https://marketplace.visualstudio.com/items?itemName=GitHub.copilot
    */
    "github.copilot.enable": {
      "*": true,
      "enableAutoCompletions": true,
      "plaintext": true,
      "asciidoc": true,
      "markdown": true
    },
    "github.copilot.advanced": {
      "debug.showScores": true,
      "inlineSuggestCount": 12,
      "listCount": 12
    },

    /*
    Copilot extension.
    */

    /* Disable the annoying "Press Ctrl+I to ask copilot to do something..." inline hint. */
    "inlineChat.lineNaturalLanguageHint": false,

    /*
    Jest extension. This is not one of my default extensions, but it is required
    for some of my projects, and the extension has an annoying habit of opening
    terminals when it is enabled and workspaces are opened without a Jest
    configuration. https://github.com/jest-community/vscode-jest
    */

    /* Fully disable the Jest extension, if it is installed, in this workspace.
    Requires v6 of the extension. */
    "jest.enable": false,

    /*
    Render Line Endings extension.
    https://marketplace.visualstudio.com/items?itemName=medo64.render-crlf
    */

    /* Character used to display LF (line-feed) line ending
    (aka Linux/Mac line ending). */
    "code-eol.newlineCharacter": "↓",

    /* Character used to display CR (carriage-return) line ending
    (aka old Macintosh line ending). */
    "code-eol.returnCharacter": "←",

    /* Character used to display CRLF (carriage-return, line-feed) line ending
    (aka Windows line ending). */
    "code-eol.crlfCharacter": "↵",

    /*
    ToDo Tree extension.
    https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree
    */

    /* Use only `TODO` notations. This setting works only in workspace roots. */
    "todo-tree.general.tags": [
      "TODO"
    ]

  }
}
